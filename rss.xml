<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"><channel><title>HuFei&apos;s Site</title><description>希望这博客里的文章是有意义的!</description><link>https://hufeispace.com/</link><item><title>CSS 布局之如何使用CSS构建一个瀑布流</title><link>https://hufeispace.com/blog/0035_css-%E5%B8%83%E5%B1%80%E4%B9%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%80%91%E5%B8%83%E6%B5%81/</link><guid isPermaLink="true">https://hufeispace.com/blog/0035_css-%E5%B8%83%E5%B1%80%E4%B9%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8css%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%80%91%E5%B8%83%E6%B5%81/</guid><pubDate>Fri, 05 Apr 2024 00:00:00 GMT</pubDate></item><item><title>Draft：常见面试题之事件循环</title><link>https://hufeispace.com/blog/0034_draft%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link><guid isPermaLink="true">https://hufeispace.com/blog/0034_draft%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid><description>这个需要从浏览器和Node.js两方面讲，但是二者的初衷是一致的，但在具体实现原理和事件阶段（宿主环境不同导致）上有些许差异。 首先看下 whatwg 官方给的定义：</description><pubDate>Fri, 29 Mar 2024 00:00:00 GMT</pubDate></item><item><title>比Map自由度更高一些的flatMap</title><link>https://hufeispace.com/blog/0033_%E6%AF%94map%E8%87%AA%E7%94%B1%E5%BA%A6%E6%9B%B4%E9%AB%98%E4%B8%80%E4%BA%9B%E7%9A%84flatmap/</link><guid isPermaLink="true">https://hufeispace.com/blog/0033_%E6%AF%94map%E8%87%AA%E7%94%B1%E5%BA%A6%E6%9B%B4%E9%AB%98%E4%B8%80%E4%BA%9B%E7%9A%84flatmap/</guid><description>在使用Array.prototype.map方法时，会返回一个新的数组，新的数组长度总是跟原有数组相同。  1. const array1 = [1, 4, 9, 16];  3. // Pass a function to map  4. const map1 = array1.map((x) =&gt; x * 2);  6. console.log(map1);</description><pubDate>Thu, 28 Mar 2024 00:00:00 GMT</pubDate></item><item><title>Set VS Array</title><link>https://hufeispace.com/blog/0032_set-vs-array/</link><guid isPermaLink="true">https://hufeispace.com/blog/0032_set-vs-array/</guid><description>数组（Array）和集合（Set）数据结构类型有很多共同点，下面我们就来看看它们有哪些相似之处、彼此有何不同以及它们的使用情况。 Set是一种数据类型，可用于存储任何类型的数据，无论是原始数据还是对象的引用。Set将数据存储在具有键的集合中，这些键可以按照插入时的顺序进行迭代。</description><pubDate>Wed, 27 Mar 2024 00:00:00 GMT</pubDate></item><item><title>WebGL 深入浅出</title><link>https://hufeispace.com/blog/0030_webgl-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</link><guid isPermaLink="true">https://hufeispace.com/blog/0030_webgl-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</guid><description>原文：An Introduction to WebGL — Part 1 [https://dev.opera.com/articles/introduction-to-webgl-part-1/]</description><pubDate>Sun, 24 Mar 2024 00:00:00 GMT</pubDate></item><item><title>MacOS设置 ReactNative iOS开发环境的常见问题解决方案</title><link>https://hufeispace.com/blog/0031_macos%E8%AE%BE%E7%BD%AE-reactnative-ios%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><guid isPermaLink="true">https://hufeispace.com/blog/0031_macos%E8%AE%BE%E7%BD%AE-reactnative-ios%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>Mac系统通常自带ruby，但是版本一般比较旧  1. ruby -v  2. # ruby 2.6.10p210 (2022-04-12 revision 67958) [universal.x86_64-darwin22]bash</description><pubDate>Sun, 24 Mar 2024 00:00:00 GMT</pubDate></item><item><title>洋葱模型</title><link>https://hufeispace.com/blog/0029_%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B/</link><guid isPermaLink="true">https://hufeispace.com/blog/0029_%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B/</guid><description>Koa 的洋葱模型指的是以 next() 函数为分割点，先由外到内执行 Request 的逻辑，再由内到外执行 Response 的逻辑。通过洋葱模型，将多个中间件之间通信等变得更加可行和简单。其实现的原理并不是很复杂，主要是 compose 方法。</description><pubDate>Thu, 21 Mar 2024 00:00:00 GMT</pubDate></item><item><title>浏览器页面渲染——经典题目：输入URL后发生了什么？</title><link>https://hufeispace.com/blog/0027_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E8%BE%93%E5%85%A5url%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</link><guid isPermaLink="true">https://hufeispace.com/blog/0027_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E8%BE%93%E5%85%A5url%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</guid><description>浏览器根据域名（Domain）向DNS服务器查询该domain对应的IP地址；</description><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate></item><item><title>不用除法，一个简单的算法题</title><link>https://hufeispace.com/blog/0028_%E4%B8%8D%E7%94%A8%E9%99%A4%E6%B3%95%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/</link><guid isPermaLink="true">https://hufeispace.com/blog/0028_%E4%B8%8D%E7%94%A8%E9%99%A4%E6%B3%95%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98/</guid><description>有一个长度为len数组arr（[1,2,3,4]），要求返回一个新数组newArr（[24, 12, 8, 6]） 对于新数组，存在newArr[i] = arr[1] * arr[2] *…*arr[i-1] * arr[i + 1] … arr[len-1]</description><pubDate>Wed, 20 Mar 2024 00:00:00 GMT</pubDate></item><item><title>JS中的函数</title><link>https://hufeispace.com/blog/0026_js%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</link><guid isPermaLink="true">https://hufeispace.com/blog/0026_js%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</guid><pubDate>Mon, 08 Jul 2019 00:00:00 GMT</pubDate></item><item><title>JS之防抖(debounce)和节流（throttle）</title><link>https://hufeispace.com/blog/0025_js%E4%B9%8B%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</link><guid isPermaLink="true">https://hufeispace.com/blog/0025_js%E4%B9%8B%E9%98%B2%E6%8A%96debounce%E5%92%8C%E8%8A%82%E6%B5%81throttle/</guid><description>1.          function debounce(fn, time) {  2.              let timer = null;  3.              return function (...args) {  4.                  let ctx = this;  5.                  clearTimeout(timer);</description><pubDate>Tue, 02 Jul 2019 00:00:00 GMT</pubDate></item><item><title>JavaScript 之 原型和原型链</title><link>https://hufeispace.com/blog/0024_javascript-%E4%B9%8B-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</link><guid isPermaLink="true">https://hufeispace.com/blog/0024_javascript-%E4%B9%8B-%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</guid><description>1. 构造函数： 构造函数实际上是一个普通函数，通过new操作符，可以利用构造函数快速创建对象；  2. prototype：每个构造函数自身上都会有一个prototype属性，该属性值为一个对象，这个对象具有一个constructor属性，constructor指向构造函数自身；</description><pubDate>Sat, 29 Jun 2019 00:00:00 GMT</pubDate></item><item><title>手写bind</title><link>https://hufeispace.com/blog/0023_%E6%89%8B%E5%86%99bind/</link><guid isPermaLink="true">https://hufeispace.com/blog/0023_%E6%89%8B%E5%86%99bind/</guid><description>1.   Function.prototype.bind=function(ctx){  2.      let fn = this;  4.      if(!ctx){  5.          ctx = typeof window !== &apos;undefined&apos; ? window : global;  8.      return</description><pubDate>Thu, 27 Jun 2019 00:00:00 GMT</pubDate></item><item><title>js深拷贝与循环引用</title><link>https://hufeispace.com/blog/0022_js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</link><guid isPermaLink="true">https://hufeispace.com/blog/0022_js%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</guid><description>1.  function deepCopy(target) {  2.      var arr = []; // use array store the used refrence, and avoid repeat  3.      return _deepCopy(target);  5.      function _deepCopy(target) {</description><pubDate>Wed, 26 Jun 2019 00:00:00 GMT</pubDate></item><item><title>js取0到50之间10个不重复的随机数</title><link>https://hufeispace.com/blog/0021_js%E5%8F%960%E5%88%B050%E4%B9%8B%E9%97%B410%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</link><guid isPermaLink="true">https://hufeispace.com/blog/0021_js%E5%8F%960%E5%88%B050%E4%B9%8B%E9%97%B410%E4%B8%AA%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</guid><description>1.  function getRandom( len=10, total=50 ){  2.      // step 1: generate a array, and its length is 50  3.      let arr = Object.keys(Array.from(*new* Array(total)));  5.      let out=[], i = 0;</description><pubDate>Tue, 25 Jun 2019 00:00:00 GMT</pubDate></item><item><title>ES6之Promise</title><link>https://hufeispace.com/blog/0019_es6%E4%B9%8Bpromise/</link><guid isPermaLink="true">https://hufeispace.com/blog/0019_es6%E4%B9%8Bpromise/</guid><description>Promise是JavaScript中为解决异步问题，结合社区已有规范，提出的一种异步编程解决方案。 在ES6中，Promise本身一个构造函数，原型链上有then、catch和finally等方法。自身的静态方法有all、race、reject和resolve等。 image [https://user-images.githubusercontent.com/25574040/59982651-4ae76080-9648-11e9-9de5-8bf183af7c76.png]</description><pubDate>Mon, 24 Jun 2019 00:00:00 GMT</pubDate></item><item><title>三种基本排序</title><link>https://hufeispace.com/blog/0020_%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F/</link><guid isPermaLink="true">https://hufeispace.com/blog/0020_%E4%B8%89%E7%A7%8D%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F/</guid><description>2.  name： 快速排序  3.  1. 在数据集之中，选择一个元素作为&apos;基准&apos;（pivot）。  7.  function quickSort(arr){</description><pubDate>Mon, 24 Jun 2019 00:00:00 GMT</pubDate></item><item><title>一个简单的输出测试</title><link>https://hufeispace.com/blog/0018_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95/</link><guid isPermaLink="true">https://hufeispace.com/blog/0018_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%93%E5%87%BA%E6%B5%8B%E8%AF%95/</guid><description>1. function b(){console.log(&apos;1111&apos;);}  2. function b(){console.log(&apos;22222&apos;);}  3. var b=3;  4. b();javascript</description><pubDate>Sun, 23 Jun 2019 00:00:00 GMT</pubDate></item><item><title>【CSS揭秘】之用CSS实现一些基本形状</title><link>https://hufeispace.com/blog/0017_css%E6%8F%AD%E7%A7%98%E4%B9%8B%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6/</link><guid isPermaLink="true">https://hufeispace.com/blog/0017_css%E6%8F%AD%E7%A7%98%E4%B9%8B%E7%94%A8css%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E5%BD%A2%E7%8A%B6/</guid><description>借助border-radius  1. &lt;style&gt;  2. 	.circle{  3. 		width: 200px;  4. 		height: 200px;  5. 		background: yellowgreen;  6. 		border-radius: 100px;  8. &lt;/style&gt;  9. &lt;div</description><pubDate>Tue, 18 Jun 2019 00:00:00 GMT</pubDate></item><item><title>background-clip和半透明边框</title><link>https://hufeispace.com/blog/0015_background-clip%E5%92%8C%E5%8D%8A%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86/</link><guid isPermaLink="true">https://hufeispace.com/blog/0015_background-clip%E5%92%8C%E5%8D%8A%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86/</guid><description>1. hsla的使用  2. background-clip  1.   &lt;!DOCTYPE html&gt;  2.   &lt;html lang=&apos;en&apos;&gt;  4.   &lt;head&gt;  5.       &lt;meta charset=&apos;UTF-8&apos;&gt;  6.       &lt;meta name=&apos;viewport&apos; content=&apos;width=device-width,</description><pubDate>Sun, 09 Jun 2019 00:00:00 GMT</pubDate></item><item><title>CSS揭秘之多重边框</title><link>https://hufeispace.com/blog/0016_css%E6%8F%AD%E7%A7%98%E4%B9%8B%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/</link><guid isPermaLink="true">https://hufeispace.com/blog/0016_css%E6%8F%AD%E7%A7%98%E4%B9%8B%E5%A4%9A%E9%87%8D%E8%BE%B9%E6%A1%86/</guid><description>1. border-shadow  2. outline  1.  &lt;!DOCTYPE html&gt;  2.  &lt;html lang=&apos;en&apos;&gt;  4.  &lt;head&gt;  5.      &lt;meta charset=&apos;UTF-8&apos;&gt;  6.      &lt;meta name=&apos;viewport&apos; content=&apos;width=device-width, initial-scale=1.0&apos;&gt;</description><pubDate>Sun, 09 Jun 2019 00:00:00 GMT</pubDate></item><item><title>元素总是居中且高度是宽度的50%</title><link>https://hufeispace.com/blog/0014_%E5%85%83%E7%B4%A0%E6%80%BB%E6%98%AF%E5%B1%85%E4%B8%AD%E4%B8%94%E9%AB%98%E5%BA%A6%E6%98%AF%E5%AE%BD%E5%BA%A6%E7%9A%8450/</link><guid isPermaLink="true">https://hufeispace.com/blog/0014_%E5%85%83%E7%B4%A0%E6%80%BB%E6%98%AF%E5%B1%85%E4%B8%AD%E4%B8%94%E9%AB%98%E5%BA%A6%E6%98%AF%E5%AE%BD%E5%BA%A6%E7%9A%8450/</guid><description>1. 元素e水平垂直居中；  2. 元素e水平方向与父元素保持10px间距；  3. 元素e的高度是宽度的一半；  1. 水平垂直居中，这个还好处理。网上已经有若干种解决方案了CSS实现水平垂直居中的1010种方式 [https://yanhaijing.com/css/2018/01/17/horizontal-vertical-center/]。</description><pubDate>Fri, 26 Apr 2019 00:00:00 GMT</pubDate></item><item><title>图解HTTP</title><link>https://hufeispace.com/blog/0013_%E5%9B%BE%E8%A7%A3http/</link><guid isPermaLink="true">https://hufeispace.com/blog/0013_%E5%9B%BE%E8%A7%A3http/</guid><description>HTTP最早由Tim Berners Lee提出用于知识共享的一种协议。因为在1989年之前，互联网只属于少数人。 最初的基本理念： 借助多文档之间的互相关联形成的超文本，连成可互相参阅的WWW（World Wide Web， 万维网）。</description><pubDate>Sun, 31 Mar 2019 00:00:00 GMT</pubDate></item><item><title>A trick 用JS获取随机颜色</title><link>https://hufeispace.com/blog/0012_a-trick-%E7%94%A8js%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/</link><guid isPermaLink="true">https://hufeispace.com/blog/0012_a-trick-%E7%94%A8js%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E9%A2%9C%E8%89%B2/</guid><description>在CSS中， 颜色一般用#000000 ~ #ffffff 6位十六进制数表示。 那么只要生成 #000000 ~ #ffffff之间的随机数即可。  1. (&apos;00000&apos;+Math.random()*(0xffffff+1)&lt;&lt;0).toString(16)javascript</description><pubDate>Sat, 16 Mar 2019 00:00:00 GMT</pubDate></item><item><title>BFC及自适应布局</title><link>https://hufeispace.com/blog/0011_bfc%E5%8F%8A%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</link><guid isPermaLink="true">https://hufeispace.com/blog/0011_bfc%E5%8F%8A%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80/</guid><description>* &lt;html&gt;根元素  * float的值不为none  * overflow的值为 auto，scroll和hidden  * display的值为table-cell、table-caption 和 inline-block中的任何一个</description><pubDate>Mon, 21 Jan 2019 00:00:00 GMT</pubDate></item><item><title>利用clear清除浮动的一些问题</title><link>https://hufeispace.com/blog/0010_%E5%88%A9%E7%94%A8clear%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</link><guid isPermaLink="true">https://hufeispace.com/blog/0010_%E5%88%A9%E7%94%A8clear%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</guid><description>1. .clearfix:before {  2.     content: &apos;.&apos;;   3.     display: block;   4.     height: 0;   5.     clear: both;   6.     visibility: hidden;  7. }css</description><pubDate>Thu, 17 Jan 2019 00:00:00 GMT</pubDate></item><item><title>CSS中的内联元素</title><link>https://hufeispace.com/blog/0009_css%E4%B8%AD%E7%9A%84%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0/</link><guid isPermaLink="true">https://hufeispace.com/blog/0009_css%E4%B8%AD%E7%9A%84%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0/</guid><description>对于非替换元素，其高度是由line-height属性定义的。一行的高度就是line-height * 1；n行的高度就是line-height * n。</description><pubDate>Tue, 15 Jan 2019 00:00:00 GMT</pubDate></item><item><title>聊聊CSS中counter</title><link>https://hufeispace.com/blog/0008_%E8%81%8A%E8%81%8Acss%E4%B8%ADcounter/</link><guid isPermaLink="true">https://hufeispace.com/blog/0008_%E8%81%8A%E8%81%8Acss%E4%B8%ADcounter/</guid><description>在介绍 CSS counter前，我们先明确两个概念： 替换元素 和 非替换元素。 在HTML中，什么是替换元素，什么又是非替换元素？举例说明，img是替换元素，因为它的内容是根据src属性关联的。 span是非替换元素，我们无法改变span标签本身的内容（实际上它显示的文字是由它的子节点定义的，纯文本在html也是一种节点类型，文本节点）。</description><pubDate>Thu, 10 Jan 2019 00:00:00 GMT</pubDate></item><item><title>JS模块规范回炉再造</title><link>https://hufeispace.com/blog/0007_js%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%E5%9B%9E%E7%82%89%E5%86%8D%E9%80%A0/</link><guid isPermaLink="true">https://hufeispace.com/blog/0007_js%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83%E5%9B%9E%E7%82%89%E5%86%8D%E9%80%A0/</guid><description>AMD Specifics [https://github.com/amdjs/amdjs-api/wiki/AMD] 在AMD的中，一个模块由定义，依赖和工厂函数 三部分组成。</description><pubDate>Wed, 09 Jan 2019 00:00:00 GMT</pubDate></item><item><title>ES6中箭头函数的作用</title><link>https://hufeispace.com/blog/0006_es6%E4%B8%AD%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</link><guid isPermaLink="true">https://hufeispace.com/blog/0006_es6%E4%B8%AD%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</guid><description>关于ES6中的箭头函数，箭头函数 MDN [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions]这篇文章讲得已经很全面了。</description><pubDate>Tue, 08 Jan 2019 00:00:00 GMT</pubDate></item><item><title>现代浏览器的背后的工作原理</title><link>https://hufeispace.com/blog/0005_%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%83%8C%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link><guid isPermaLink="true">https://hufeispace.com/blog/0005_%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%83%8C%E5%90%8E%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid><description>* render渲染</description><pubDate>Mon, 07 Jan 2019 00:00:00 GMT</pubDate></item><item><title>CSS2中的有关盒模型与布局的一些概念</title><link>https://hufeispace.com/blog/0004_css2%E4%B8%AD%E7%9A%84%E6%9C%89%E5%85%B3%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</link><guid isPermaLink="true">https://hufeispace.com/blog/0004_css2%E4%B8%AD%E7%9A%84%E6%9C%89%E5%85%B3%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%B8%83%E5%B1%80%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</guid><description>在CSS中，一个元素就可以看作一个box。具体信息可以参考盒模型的解释，这里暂且不作展开。</description><pubDate>Sun, 06 Jan 2019 00:00:00 GMT</pubDate></item><item><title>CSS中的盒模型</title><link>https://hufeispace.com/blog/0003_css%E4%B8%AD%E7%9A%84%E7%9B%92%E6%A8%A1%E5%9E%8B/</link><guid isPermaLink="true">https://hufeispace.com/blog/0003_css%E4%B8%AD%E7%9A%84%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid><description>在对文档进行布局时，浏览器渲染引擎会根据盒模型（CSS-Box）,将所有的元素表现一个矩形盒子。</description><pubDate>Sat, 05 Jan 2019 00:00:00 GMT</pubDate></item><item><title>float元素换行展示的问题</title><link>https://hufeispace.com/blog/0002_float%E5%85%83%E7%B4%A0%E6%8D%A2%E8%A1%8C%E5%B1%95%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</link><guid isPermaLink="true">https://hufeispace.com/blog/0002_float%E5%85%83%E7%B4%A0%E6%8D%A2%E8%A1%8C%E5%B1%95%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>搜了好多资料，大多提到了解决方案（调整顺序/将前面的元素转成float元素）。 然而，好奇的我还是想知道究竟为何换行。</description><pubDate>Fri, 04 Jan 2019 00:00:00 GMT</pubDate></item><item><title>DOM扩展</title><link>https://hufeispace.com/blog/0001_dom%E6%89%A9%E5%B1%95/</link><guid isPermaLink="true">https://hufeispace.com/blog/0001_dom%E6%89%A9%E5%B1%95/</guid><description>querySelect(), querySelectAll()这两个方法遵循CSS的选择器规则，IE8+及其它最新版浏览器均支持这两个方法。 这两个方法的差别在于，一个返回符合匹配规则的第一个元素，一个返回匹配规则的所有元素。若遇到不匹配的情况，前者返回null，后者返回一个空的NodeList。</description><pubDate>Sat, 27 Oct 2018 00:00:00 GMT</pubDate></item></channel></rss>